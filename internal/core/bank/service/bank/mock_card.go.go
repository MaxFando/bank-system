// Code generated by MockGen. DO NOT EDIT.
// Source: card.go

// Package bank is a generated GoMock package.
package bank

import (
	context "context"
	reflect "reflect"

	entity "github.com/MaxFando/bank-system/internal/core/bank/entity"
	transaction "github.com/MaxFando/bank-system/pkg/sqlext/transaction"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// FindByAccountID mocks base method.
func (m *MockCardRepository) FindByAccountID(ctx context.Context, accountID int32) ([]entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountID indicates an expected call of FindByAccountID.
func (mr *MockCardRepositoryMockRecorder) FindByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountID", reflect.TypeOf((*MockCardRepository)(nil).FindByAccountID), ctx, accountID)
}

// FindByID mocks base method.
func (m *MockCardRepository) FindByID(ctx context.Context, id int32) (*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCardRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCardRepository)(nil).FindByID), ctx, id)
}

// Save mocks base method.
func (m *MockCardRepository) Save(ctx context.Context, card *entity.Card) (*entity.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, card)
	ret0, _ := ret[0].(*entity.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCardRepositoryMockRecorder) Save(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCardRepository)(nil).Save), ctx, card)
}

// MockCardTransactionRepository is a mock of CardTransactionRepository interface.
type MockCardTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardTransactionRepositoryMockRecorder
}

// MockCardTransactionRepositoryMockRecorder is the mock recorder for MockCardTransactionRepository.
type MockCardTransactionRepositoryMockRecorder struct {
	mock *MockCardTransactionRepository
}

// NewMockCardTransactionRepository creates a new mock instance.
func NewMockCardTransactionRepository(ctrl *gomock.Controller) *MockCardTransactionRepository {
	mock := &MockCardTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockCardTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardTransactionRepository) EXPECT() *MockCardTransactionRepositoryMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockCardTransactionRepository) Deposit(ctx context.Context, cardID int32, amount decimal.Decimal) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, cardID, amount)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockCardTransactionRepositoryMockRecorder) Deposit(ctx, cardID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockCardTransactionRepository)(nil).Deposit), ctx, cardID, amount)
}

// FindByID mocks base method.
func (m *MockCardTransactionRepository) FindByID(ctx context.Context, id int32) (*entity.CardTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.CardTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockCardTransactionRepositoryMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockCardTransactionRepository)(nil).FindByID), ctx, id)
}

// Transfer mocks base method.
func (m *MockCardTransactionRepository) Transfer(ctx context.Context, cardID int32, amount decimal.Decimal) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, cardID, amount)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockCardTransactionRepositoryMockRecorder) Transfer(ctx, cardID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockCardTransactionRepository)(nil).Transfer), ctx, cardID, amount)
}

// WithTx mocks base method.
func (m *MockCardTransactionRepository) WithTx(ctx context.Context, fn transaction.AtomicFn, opts ...transaction.TxOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, fn}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCardTransactionRepositoryMockRecorder) WithTx(ctx, fn interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, fn}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCardTransactionRepository)(nil).WithTx), varargs...)
}

// Withdraw mocks base method.
func (m *MockCardTransactionRepository) Withdraw(ctx context.Context, cardID int32, amount decimal.Decimal) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, cardID, amount)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockCardTransactionRepositoryMockRecorder) Withdraw(ctx, cardID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockCardTransactionRepository)(nil).Withdraw), ctx, cardID, amount)
}
